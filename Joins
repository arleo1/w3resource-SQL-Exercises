/* SQL Exercises, Practice, Solution - JOINS
https://www.w3resource.com/sql-exercises/sql-joins-exercises.php */

Table: salesman

salesman_id |    name    |   city   | commission 
-------------+------------+----------+------------
        5001 | James Hoog | New York |       0.15
        5002 | Nail Knite | Paris    |       0.13
        5005 | Pit Alex   | London   |       0.11
        5006 | Mc Lyon    | Paris    |       0.14
        5007 | Paul Adam  | Rome     |       0.13
        5003 | Lauson Hen | San Jose |       0.12
        
 Table: customer
 
 customer_id |   cust_name    |    city    | grade | salesman_id 
-------------+----------------+------------+-------+-------------
        3002 | Nick Rimando   | New York   |   100 |        5001
        3007 | Brad Davis     | New York   |   200 |        5001
        3005 | Graham Zusi    | California |   200 |        5002
        3008 | Julian Green   | London     |   300 |        5002
        3004 | Fabian Johnson | Paris      |   300 |        5006
        3009 | Geoff Cameron  | Berlin     |   100 |        5003
        3003 | Jozy Altidor   | Moscow     |   200 |        5007
        3001 | Brad Guzan     | London     |       |        5005
        
 Table: orders
 
 ord_no      purch_amt   ord_date    customer_id  salesman_id
----------  ----------  ----------  -----------  -----------
70001       150.5       2012-10-05  3005         5002
70009       270.65      2012-09-10  3001         5005
70002       65.26       2012-10-05  3002         5001
70004       110.5       2012-08-17  3009         5003
70007       948.5       2012-09-10  3005         5002
70005       2400.6      2012-07-27  3007         5001
70008       5760        2012-09-10  3002         5001
70010       1983.43     2012-10-10  3004         5006
70003       2480.4      2012-10-10  3009         5003
70012       250.45      2012-06-27  3008         5002
70011       75.29       2012-08-17  3003         5007
70013       3045.6      2012-04-25  3002         5001

Table: comapny_mast

COM_ID COM_NAME
------ -------------
    11 Samsung
    12 iBall
    13 Epsion
    14 Zebronics
    15 Asus
    16 Frontech
    
Table: item_mast

PRO_ID PRO_NAME                   PRO_PRICE    PRO_COM
------- ------------------------- ---------- ----------
    101 Mother Board                    3200         15
    102 Key Board                        450         16
    103 ZIP drive                        250         14
    104 Speaker                          550         16
    105 Monitor                         5000         11
    106 DVD drive                        900         12
    107 CD drive                         800         12
    108 Printer                         2600         13
    109 Refill cartridge                 350         13
    110 Mouse                            250         12
    
 Table: emp_department
 
 DPT_CODE DPT_NAME        DPT_ALLOTMENT
-------- --------------- -------------
      57 IT                      65000
      63 Finance                 15000
      47 HR                     240000
      27 RD                      55000
      89 QC                      75000
      
 Table: emp_details
 
  EMP_IDNO EMP_FNAME       EMP_LNAME         EMP_DEPT
--------- --------------- --------------- ----------
   127323 Michale         Robbin                  57
   526689 Carlos          Snares                  63
   843795 Enric           Dosio                   57
   328717 Jhon            Snares                  63
   444527 Joseph          Dosni                   47
   659831 Zanifer         Emily                   47
   847674 Kuleswar        Sitaraman               57
   748681 Henrey          Gabriel                 47
   555935 Alex            Manuel                  57
   539569 George          Mardy                   27
   733843 Mario           Saule                   63
   631548 Alan            Snappy                  27
   839139 Maria           Foster                  57
   
   
1. Write a SQL statement to prepare a list with salesman name, customer name and their cities for the salesmen and customer who belongs to the same city.
   
SELECT s.name AS "Salesman" , c.cust_name, s.city, c.city
FROM customer AS c
INNER JOIN salesman AS s
ON c.city = s.city;


2. Write a SQL statement to make a list with order no, purchase amount, customer name and their cities for those orders which order amount between 500 and 2000.

SELECT o.ord_no, o.purch_amt, c.cust_name, c.city
FROM customer AS c, orders AS o
WHERE o.purch_amt BETWEEN 500 AND 2000
AND c.customer_id = o.customer_id;


3. Write a SQL statement to know which salesman are working for which customer. 

SELECT c.cust_name, s.name AS "Salesman"
FROM customer AS c
INNER JOIN salesman AS s
ON c.salesman_id = s.salesman_id;


4. Write a SQL statement to find the list of customers who appointed a salesman for their jobs who gets a commission from the company is more than 12%. 

SELECT c.cust_name, s.name AS "Salesman", s.commission
FROM customer AS c, salesman AS s
WHERE s.commission > 0.12
AND c.salesman_id = s.salesman_id;


5. Write a SQL statement to find the list of customers who appointed a salesman for their jobs who does not live in the same city where their customer lives, and gets a commission is above 12% 

SELECT c.cust_name, s.name AS "Salesman", s.commission
FROM customer AS c, salesman AS s
WHERE s.commission > 0.12
AND s.city <> c.city
AND c.salesman_id = s.salesman_id;


6. Write a SQL statement to find the details of a order i.e. order number, order date, amount of order, which customer gives the order and which salesman works for that customer and commission rate he gets for an order. 

SELECT o.ord_no, o.ord_date, o.purch_amt, c.cust_name, s.name AS "Salesman", s.commission
FROM customer AS c
INNER JOIN orders AS o
ON c.customer_id = o.customer_id
INNER JOIN salesman AS s
ON s.salesman_id = c.salesman_id;


7. Write a SQL statement to make a join on the tables salesman, customer and orders in such a form that the same column of each table will appear once and only the relational rows will come.

SELECT o.ord_no, o.purch_amt, o.ord_date, o.customer_id, o.salesman_id, c.cust_name, c.city, s.city, c.grade, s.name, s.commission
FROM orders AS o, customer AS c, salesman as s
WHERE o.customer_id = c.customer_id 
AND o.salesman_id = s.salesman_id 
AND c.city = s.city;


8. Write a SQL statement to make a list for the customer who works either through a salesman or by own.

SELECT *
FROM customer AS c, salesman as s
WHERE c.salesman_id = s.salesman_id 
ORDER BY cust_name;


9. Write a SQL statement to make a list for the customer who holds a grade less than 300 and works either through a salesman or by own.

SELECT *
FROM customer AS c, salesman as s
WHERE c.salesman_id = s.salesman_id
AND c.grade < 300 
ORDER BY cust_name;


10. Write a SQL statement to make a report with customer name, city, order number, order date, and order amount 
according to the order date to find that either any of the existing customers have placed no order or placed one or more orders. 

SELECT c.cust_name, c.city, o.ord_no, o.ord_date, o.purch_amt
FROM customer AS c, orders AS o
WHERE c.customer_id = o.customer_id
ORDER BY o.ord_date;


11. Write a SQL statement to make a report with customer name, city, order number, order date, order amount salesman name and commission 
to find that either any of the existing customers have placed no order or placed one or more orders by their salesman or by own. 

SELECT c.cust_name, c.city, o.ord_no, o.ord_date, o.purch_amt, s.salesman_id, s.commission
FROM customer AS c, orders AS o, salesman AS s
WHERE c.customer_id = o.customer_id
AND c.salesman_id = s.salesman_id
ORDER BY o.ord_date;


12. Write a SQL statement to make a list in ascending order for the salesmen who works either for one or more customer or not yet join under any of the customers.

SELECT c.cust_name, c.city, s.name, s.commission
FROM customer AS c, salesman AS s
WHERE c.salesman_id = s.salesman_id;


13. Write a SQL statement to make a list for all salesmen along with customer name, city, grade, order number, date, and amount.

SELECT c.cust_name, c.city, c.grade, o.ord_no, o.ord_date, o.purch_amt
FROM customer AS c, salesman AS s, orders AS o
WHERE c.salesman_id = s.salesman_id
AND o.salesman_id = s.salesman_id;


14. Write a SQL statement to make a list for the salesmen who either work for one or more customers or yet to join any of the customer. 
The customer may have placed, either one or more orders on or above order amount 2000 and must have a grade, or he may not have placed any order to the associated supplier.

SELECT DISTINCT s.name
FROM customer AS c, salesman AS s, orders AS o
WHERE c.salesman_id = s.salesman_id
AND o.salesman_id = s.salesman_id
AND o.purch_amt >= 2000
AND c.grade IS NOT NULL;


15. Write a SQL statement to make a report with customer name, city, order no. order date, purchase amount for those customers from the existing list who placed one or more orders 
or which order(s) have been placed by the customer who is not on the list.

SELECT c.cust_name, c.city, o.ord_no, o.ord_date, o.purch_amt
FROM customer AS c, orders AS o
WHERE c.customer_id = o.customer_id;


16. Write a SQL statement to make a report with customer name, city, order no. order date, purchase amount for only those customers on the list who must have a grade 
and placed one or more orders or which order(s) have been placed by the customer who is neither in the list nor have a grade.

SELECT c.cust_name, c.city, o.ord_no, o.ord_date, o.purch_amt
FROM customer AS c 
LEFT JOIN orders AS o
ON c.customer_id = o.customer_id
WHERE c.grade IS NOT NULL;


17. Write a SQL statement to make a cartesian product between salesman and customer i.e. each salesman will appear for all customer and vice versa. 

SELECT *
FROM salesman AS s 
CROSS JOIN customer AS c;


18. Write a SQL statement to make a cartesian product between salesman and customer i.e. each salesman will appear for all customer and vice versa for that salesman who belongs to a city.

SELECT *
FROM salesman AS s 
CROSS JOIN customer AS c
WHERE s.city IS NOT NULL;


19. Write a SQL statement to make a cartesian product between salesman and customer i.e. each salesman will appear for all customer and vice versa for those salesmen who belongs to a city and the customers who must have a grade.

SELECT *
FROM salesman AS s 
CROSS JOIN customer AS c
WHERE s.city IS NOT NULL
AND c.grade IS NOT NULL;


20. Write a SQL statement to make a cartesian product between salesman and customer i.e. each salesman will appear for all customer and vice versa for those salesmen who must belong a city which is not the same as his customer and the customers should have an own grade.

SELECT *
FROM salesman AS s 
CROSS JOIN customer AS c
WHERE s.city <> c.city
AND s.city IS NOT NULL
AND c.grade IS NOT NULL;


21. Write a SQL query to display all the data from the item_mast, including all the data for each item's producer company.

SELECT *
FROM item_mast AS i 
LEFT JOIN company_mast AS c
ON i.pro_com = c.com_id;


22. Write a SQL query to display the item name, price, and company name of all the products

SELECT i.pro_name, i.pro_price, c.com_name
FROM company_mast AS c
LEFT JOIN item_mast AS i
ON c.com_id = i.pro_com;


23. Write a SQL query to display the average price of items of each company, showing the name of the company.

SELECT c.com_name, AVG(i.pro_price) AS "Average Price"
FROM company_mast AS c
INNER JOIN item_mast AS i
ON c.com_id = i.pro_com
GROUP BY c.com_name
ORDER BY c.com_name;


24. Write a SQL query to display the names of the company whose products have an average price larger than or equal to Rs. 350.

SELECT c.com_name, AVG(i.pro_price) AS "Average Price"
FROM company_mast AS c
INNER JOIN item_mast AS i
ON c.com_id = i.pro_com
GROUP BY c.com_name
HAVING AVG(i.pro_price) >= 350;


25. Write a SQL query to display the name of each company along with the ID and price for their most expensive product.

SELECT i.pro_name, i.pro_price, c.com_name
FROM item_mast AS i 
INNER JOIN company_mast AS c
ON i.pro_com = c.com_id
AND i.pro_price = (SELECT MAX(i.pro_price)
  FROM item_mast AS i
  WHERE i.pro_com = c.com_id);
  

26. Write a query in SQL to display all the data of employees including their department. 

SELECT *
FROM emp_department as a
INNER JOIN emp_details as b
ON a.dpt_code = b.emp_dept;


27. Write a query in SQL to display the first name and last name of each employee, along with the name and sanction amount for their department. 

SELECT b.emp_fname, b.emp_lname, a.dpt_name, a.dpt_allotment
FROM emp_department as a
INNER JOIN emp_details as b
ON a.dpt_code = b.emp_dept;


28. Write a query in SQL to find the first name and last name of employees working for departments with a budget more than Rs. 50000.

SELECT b.emp_fname, b.emp_lname
FROM emp_department as a
INNER JOIN emp_details as b
ON a.dpt_code = b.emp_dept
WHERE a.dpt_allotment > 50000;


29. Write a query in SQL to find the names of departments where more than two employees are working. 

SELECT a.dpt_name
FROM emp_department as a
INNER JOIN emp_details as b
ON a.dpt_code = b.emp_dept
GROUP BY a.dpt_name
HAVING COUNT(a.dpt_code) > 2;
